// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// TransactionPublisherService is an autogenerated mock type for the TransactionPublisherService type
type TransactionPublisherService struct {
	mock.Mock
}

type TransactionPublisherService_Expecter struct {
	mock *mock.Mock
}

func (_m *TransactionPublisherService) EXPECT() *TransactionPublisherService_Expecter {
	return &TransactionPublisherService_Expecter{mock: &_m.Mock}
}

// PublishTransaction provides a mock function with given fields: ctx, txId, statusToUpdate, dataFormat
func (_m *TransactionPublisherService) PublishTransaction(ctx context.Context, txId int64, statusToUpdate string, dataFormat string) error {
	ret := _m.Called(ctx, txId, statusToUpdate, dataFormat)

	if len(ret) == 0 {
		panic("no return value specified for PublishTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, string) error); ok {
		r0 = rf(ctx, txId, statusToUpdate, dataFormat)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransactionPublisherService_PublishTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishTransaction'
type TransactionPublisherService_PublishTransaction_Call struct {
	*mock.Call
}

// PublishTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - txId int64
//   - statusToUpdate string
//   - dataFormat string
func (_e *TransactionPublisherService_Expecter) PublishTransaction(ctx interface{}, txId interface{}, statusToUpdate interface{}, dataFormat interface{}) *TransactionPublisherService_PublishTransaction_Call {
	return &TransactionPublisherService_PublishTransaction_Call{Call: _e.mock.On("PublishTransaction", ctx, txId, statusToUpdate, dataFormat)}
}

func (_c *TransactionPublisherService_PublishTransaction_Call) Run(run func(ctx context.Context, txId int64, statusToUpdate string, dataFormat string)) *TransactionPublisherService_PublishTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *TransactionPublisherService_PublishTransaction_Call) Return(_a0 error) *TransactionPublisherService_PublishTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TransactionPublisherService_PublishTransaction_Call) RunAndReturn(run func(context.Context, int64, string, string) error) *TransactionPublisherService_PublishTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewTransactionPublisherService creates a new instance of TransactionPublisherService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionPublisherService(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionPublisherService {
	mock := &TransactionPublisherService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
