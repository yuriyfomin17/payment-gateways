// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "payment-gateway/internal/app/domain"

	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

type UserService_Expecter struct {
	mock *mock.Mock
}

func (_m *UserService) EXPECT() *UserService_Expecter {
	return &UserService_Expecter{mock: &_m.Mock}
}

// ExecuteTransaction provides a mock function with given fields: ctx, tx
func (_m *UserService) ExecuteTransaction(ctx context.Context, tx domain.TransactionData) error {
	ret := _m.Called(ctx, tx)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.TransactionData) error); ok {
		r0 = rf(ctx, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_ExecuteTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteTransaction'
type UserService_ExecuteTransaction_Call struct {
	*mock.Call
}

// ExecuteTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - tx domain.TransactionData
func (_e *UserService_Expecter) ExecuteTransaction(ctx interface{}, tx interface{}) *UserService_ExecuteTransaction_Call {
	return &UserService_ExecuteTransaction_Call{Call: _e.mock.On("ExecuteTransaction", ctx, tx)}
}

func (_c *UserService_ExecuteTransaction_Call) Run(run func(ctx context.Context, tx domain.TransactionData)) *UserService_ExecuteTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.TransactionData))
	})
	return _c
}

func (_c *UserService_ExecuteTransaction_Call) Return(_a0 error) *UserService_ExecuteTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_ExecuteTransaction_Call) RunAndReturn(run func(context.Context, domain.TransactionData) error) *UserService_ExecuteTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// FetchTxId provides a mock function with given fields: ctx
func (_m *UserService) FetchTxId(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FetchTxId")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_FetchTxId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchTxId'
type UserService_FetchTxId_Call struct {
	*mock.Call
}

// FetchTxId is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UserService_Expecter) FetchTxId(ctx interface{}) *UserService_FetchTxId_Call {
	return &UserService_FetchTxId_Call{Call: _e.mock.On("FetchTxId", ctx)}
}

func (_c *UserService_FetchTxId_Call) Run(run func(ctx context.Context)) *UserService_FetchTxId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UserService_FetchTxId_Call) Return(_a0 int64, _a1 error) *UserService_FetchTxId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_FetchTxId_Call) RunAndReturn(run func(context.Context) (int64, error)) *UserService_FetchTxId_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
